28분.
■■■ Spring Framework 이해하기 ■■■
우리는 설정만 해주면 스프링이 알아서 다 한다.


○ 개요
   
   1. Framework
      어플리케이션을 구현하고 관리하는 환경(틀, 약속)
   
   2. Spring Framework 
      설정 정보(XML)에 의해 어플리케이션을 구성하고,
      객체를 생성, 관리하는 주체.
   

○ 스프링 프레임워크(Spring Framework)의 개념
  "이걸로 바꿔봐가 아니라 이거랑 같이 쓰면 더 좋아!"라는 접근 방법
  기존을 약속을 없애고 새로운 약속을 만드는게 아니다. 
  "유연성"이 특징이다!(예 : 인터페이스...)
  예) 너만 이어야해 - 의존성
       너 아니어도 돼 - 유연성
   
   스프링은 자바 엔터프라이즈 어플리케이션 개발에 사용되는
                      ----------------<->개인용
   어플리케이션 프레임워크.
   
   어플리케이션 프레임워크는 어플리케이션 개발을 빠르고
   효율적으로 할 수 있도록 어플리케이션의 바탕이 되는 틀과
   공통 프로그래밍 모델(ioc.di..), 그리고 기술 API 등을 제공해준다.

   - ★어플리케이션의 기본 틀 → 스프링 컨테이너(>서블릿 컨테이너)
                                            -------어떤 때는 장소가,,주체가,,모듈을 지칭하는 말로 쓰임
     스프링은 스프링 컨테이너 또는 어플리케이션 컨텍스트라고 불리는
     스프링 런타임 엔진을 제공한다.

     스프링을 잘 부려 먹기 위해서는 잘 소통을 해야하고 그게 바로 개발자의 역량이야.
     (xml과 annotaion(@이랑 같이 붙어있는 애들)을 활용하는 방법이 있어)
              -------------스프링의 철학을 이해하면..그 철학에 배치되는것임을 알 수 있다.(실무에서는 이걸로 주로 컨트롤한다.)
     
     스프링 컨테이너는 설정 정보(XML: 배치 기술서)를 참고해서
     어플리케이션을 구성하는 오브젝트(객체)를 생성하고 관리한다.
     스프링 컨테이너는 독립적으로 동작할 수도 있지만
     보통.. 웹 모듈에서 동작하는 서비스나 서블릿으로 등록해서 사용한다.

     스프링을 사용하려면 먼저 스프링 컨테이너를 다루는 방법과
     스프링 컨테이너가 어플리케이션 오브젝트를 이용할 수 있도록
     설정 정보를 작성하는 방법을 알아야 한다.

     ==> 설정 정보(XML)에 의해(우리가 넘겨주는 정보) 어플리케이션을 구성하고
         객체를 생성, 관리하는 주체
---------------------------------------------------------------------------------------------------------------
   - 공통 프로그래밍 모델 → IoC(inversion of control - 제어역전)/DI, 서비스 추상화, AOP( AOP는 이중에서 중요도가 떨어진다)
     다른 사람이 개발한것을 가져다 써도 문제 없도록 누가 만들어도 동일하게 할 수 있는 가이드라인
     프레임워크라는 어플리케이션을 구성하는 오브젝트(객체)가
     생성되고 동작하는 방식에 대한 틀을 제공해줄 뿐 아니라
     어플리케이션 코드가 어떻게 작성되어야 하는지에 대한 기준도 제시한다.
     이런 틀을 보통 프로그래밍 모델이라고 한다.
     스프링은 세 가지 핵심 프로그래밍 모델을 제공한다.


     예시) Dependency injection(의존하고 있는 객체를 주입) - 선풍기 안에서 의존하여 모터클래스라는 인스턴스를 생성하는게 아니라 밖에서 모터를 만들어 주입. 선풍기가 모터에 의존
             서비스 추상화 - 모터이기만 하면 된다.  (usb규격만 맞으면 다 꽂을 수 있는 것 처럼)
              제어역전 - 모터가 선풍기에 기생했었는데..이제는 제어가 역전되어 선풍기가 모터를 생산하는게 아니라 밖에서 모터를 만들어 주입해준다..모터가 있어야 선풍기가 있다.
     ※ 스프링 컨테이너 > IoC 컨테이너
        예시) 그냥 제공 받는거 쓰기만 해도 친환경이 되는거
     ① ★★★IoC/DI(스프링핵심기능★★★)
        오브젝트 생명 주기와 의존 관계에 대한 프로그래밍 모델이다.
	스프링은 유연하고 확장성이 뛰어난 코드를 만들 수 있게 도와주는
	객체 지향 설계 원칙과 디자인 패턴의 핵심 원리를 담고 있는
	IoC/DI 를 프레임워크의 핵심 근간으로 삼고 있다.
	스프링 프레임워크에서 동작하는 코드는
	IoC/DI 방식을 따라 작성되어야 스프링이 제공하는 가치를 제대로 누릴 수 있다.
	스프링이 직접 제공하는 모든 기술과 API, 심지어 컨테이너 까지도
	IoC/DI 방식으로 작성되어(만들어져)있다.
	스프링을 바르게 이해하고 효율적으로 사용하는 데 
	기본이 되며 가장 중요한 기술이다.

	※엄밀히 따지면 객체를 생성, 관리하게 하는 것 
	(모두 IoC 컨테이너에서 한다 = 스프링이한다, 스프링 컨테이너가 한다.)
             ★IOC가 DI 방식으로 객체를 관리한다.
	·IoC → - 객체 관리의 주체. 
		 - Inversion of Control : 제어의 역전(역제어)
		 - 객체 생성과 관리를 직접하는 것이 아니라
		   외부에서 만들어진 오브젝트(객체)를 제공받는 입장이 되는 것.
		------------------------------------------------------------------------스프링 컨터이너 안에 작은 다른 세상이 펼쳐지는거야.
		 
		 - Bean : 스프링이 관리하는 대상.
		 - Bean Factory(공장) : 객체를 관리하는 주체.  ---컨테이너 안에 공장이 있고 여기서 객체를 찍어낸다
		   일반적으로 이 기능을 확장한 Application Context 를 사용하게 된다.
		 - Application Context(공단) : Bean Factory 의 확장 버전.
		 - 설정 정보 : 어떤 객체들이 관리 대상인지 설정한 정보.
		   XML, Annotation(주석) 등을 이용한다.
		   객체 의존 관계도 표현되어 있다.
		 - IoC 컨테이너(일꾼) : 객체를 등록하고 관리하는 공간.(모든 행위의 주체) - 사람으로 표현된 부분이 있다면 그건 ioc컨테이너를 의미 스프링컨테이너에서 중요한 부분을 차지하고있음
                                                                                                                     IoC 컨테이너라고 했다가 IoC라고도 하고..ioc컨테이너= 스프링컨터이너=스프링

	·DI  → - 객체를 관리하는 방법.방식 (밀어넣는 액션, 밀어넣어진 상태 모두) 	 
	         - 자바에서 객체를 생성하고 관리하는 방법은
		   모두 has-a 관계(상속에서 배웠음...is-a?)를 통해(A 클래스 안에서 B 클래스 기반 인스턴스가 생성되는 관계)
                           (휴대전화-전화기 : is -a -->휴대전화는 전화기를 상속받아 처리할 수 있다. 
                            군인 - 총 : has -a -->특정한 클래스에 buffered reader instance)
		   처리해왔기 때문에 이들은 모두 의존 관계가 치밀하고 밀접한 상황일 수밖에 없다.
		   때문에 이런 강한 결합 상태는 유연성(질척대지 않음)을 떨어뜨리는 결과를 초래하게 된다.
		   이러한 결합 상태를 풀어주는 과정(방법)이 따로 DI 이다.
		 - Dependency Injectioni : 의존성 주입(의존관계 주입)
		 - 의존관계 주입 : 의존 객체를 이 객체를 사용하는 객체에 
		   외부에서 주입하는 액션(상태)
		 - 의존 관계 : A 가 실행되기 위해서 B 를 필요로 하는 상태
		 - 의존 객체 : A 입장에서의 의존 객체는 B (즉, 주입되는 객체)

		 ※ 우선 A 객체에 B 객체의 주소를 넘겨줌으로써 
		    B 객체를 사용하게 된다면 
		    A 객체는 여전히 B 객체를 사용하는 데는 문제가 없고,
		    B 객체는 A 객체와의 결합 상태가 느슨해진다고 할 수 있다.

		    이 때, 넘겨주는 방법은 생성자 또는 setter() 메소드를 
		    이용하는 방법이 있다.

		    DI 를 위해 객체는 작은 객체부터 생성해서
		    큰 객체로 DI 하게 된다.

		    이 때, 완성된 오브젝트(객체)가 만들어질 때까지 
		    객체를 관리할 주체가 필요하게 되는데 
		    그 역할을 하는 것이 바로 컨테이너인 것이다.

oop (object oriented programming) 객체지향프로그래밍  : 객체를 중심에 놓고(객체가 주연) 프로그래밍을 하는 기법 --자바
aop(aspect oriented programming) 관심사 지향 프로그래밍 : 관심에 있는걸 중심에 두고 // 보조업무, 주업무(a)가 잘 나누어져 있는 경우
우리는 그냥 공통되는 부분 다 잘라서 method로 만들어놓고 b,c,d를 할때 공통되는 부분 method를 불러와서 썼어

a+b
a+c
a+d

*cross cutting -> 주업무, 보조업무 분리 //  cross cutting concern(보조업무b,c,d)

이걸 a한면으로 몰고(지금의 aspect)  b,c,d를 갈아끼워 --a를 주연으로,b,c,를 바꿔끼우는 조연으로

*프록시..? 가짜로 접근?


이 둘이 대척점에 있는 개념이 아니다. AOP가 OOP를 돕는 것. 

		    
     ② 서비스 추상화
        스프링을 사용하면 환경이나 서버, 특정 기술에 종속되지 않고
	이식성이 뛰어나며 유연한 어플리케이션을 만들 수 있게 되는데,
	이를 가능하게 해주는 것이 바로 서비스 추상화이다.
	구체적인 기술과 환경에 종속되지 않도록 유연한 추상 계층을 두는 방법이다.
     
     ③ AOP(Aspect Oriented Programming)
	이 AOP 는 어플리케이션 코드에 산재해서 나타나는 부가적인 기능을
	독립적인 상태로 모듈화하는 프로그래밍 모델이다.
	스프링은 AOP 를 이용해서 다양한 엔터프라이즈 서비스를 
	적용하고도 깔끔한 코드를 유지할 수 있게 해준다.
-----------------------------------------------------------------------------------------------------------
	
   - ★기술 API 
    내가 써야하는 모듈 단위의 작은 기술들. 기술문서와 함께 가져다 쓸 수 있는 기술문서를 비롯한 환경
    써야되는거 있으면 찾아서 써 효율적으로..시행착오 줄이고..
    스프링의 가이드라인을 지켜 확실하게 만들어진것들
 
     스프링은 엔터프라이즈 어플리케이션 개발의 다양한 영역에
     바로 활용될 수 있는 방대한 양의 기술 API 를 제공한다.
     UI 작성은 물론이고, 웹 프리젠테이션 계층, 비즈니스 서비스 계층,
     기반 서비스 계층, 도메인 계층, 데이터 액세스 계층 등에서
     필요한 주요 기술을 스프링에서 일관된 방식으로 사용할 수 있도록
     지원해주는 전략 클래스를 제공한다.

     "스프링이 제공하는 API 와 지원 기술은 모두 스프링 프로그래밍 모델이 따라 작성되었기 때문에
     이를 가져다쓰는 것만으로도 스프링 프로그래밍 모델을 코드에 자연스럽게 적용할 수 있다." 

     스프링의 모든 기술은 표준 자바 엔터프라이즈 플랫폼(JavaEE)에 기술을 두고 있다.
     표준 기술과 더불어 유명 오픈 소스 기술과 주요 상용 기술에 대한 지원 기능도 다양하게 제공된다.

○ 스프링 프레임워크(Spring Framework)의 주요 기능과 특징
  
   1. 경량 컨테이너
      자바 객체를 담고, 이들 자바 객체의 생성과 소멸의 라이프 사이클을 관리.

   2. DI(Dependency Injection)
      의존성(관계) 주입(삽입)을 지원.
      설정 파일을 통해 객체간의 의존 관계를 정의.
   
   3. AOP(Aspect Oriented Porgramming) 지원
      관점 지향 프로그래밍을 지원.
      여러 모듈에 공통적으로 쓰이는 기능을 분리하여
      각 모듈에 적용하는 것이 가능.
   
   4. POJO(Plane Old Java Object) 지원
      가장 기본적인 자바 객체를 지원하여 기존 작성 코드의 유지성을 향상.
      → 보통의 자바(빈) 객체.
         - 상속(Ⅹ)
	 - 인터페이스(Ⅹ)

   5. 트랜잭션 처리(오라클 프로시저 내 00할때 배웠어)
      JDBC 나 JTA 를 사용하는 설정 파일을 통해
      트랜잭션을 관리하여 동일한 코드를 여러 환경에서
      사용하도록 하는 것이 가능.

   6. 다양한 프레임워크와 조합(그거 버리고 이거 써..이게 아니라 이거랑 같이 쓰면 더 좋아의 접근을 했기때문에)
      myBatis(iBatis), Hivernate, Struts, Struts2, JPA, JDO, JMS, Quartz 등
      다른 프레임워크 뿐 아니라 사용자가 만든 프레임워크와의 연동성을 제공한다.


※ 스프링 프레임워크(Spring Framework)에서 가장 중요한 개념

   - DI(Dependencty Injection, 의존성 주입, 의존관계 주입)
     : 객체를 생성하고 관리하는 의존성에 대해서 어떻게 처리하는가에 대한 개념.

   - IoC(Inversion of Control, 제어의 역전)
     : 인스턴스의 생성부터 소멸까지의 인스턴스 생명주기 관리를
       컨테이너가 대신하는 개념.
     
